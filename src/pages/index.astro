---

import Layout from '../layouts/Layout.astro';
import personajes from '../data/personajes';

const page = Number(Astro.url.searchParams.get("page")) || 1;
const perPage = 4;
const start = (page - 1) * perPage;
const end = start + perPage;

const paginados = personajes.slice(start, end);
const totalPages = Math.ceil(personajes.length / perPage);

---

<Layout>
  <div id="spinner" class="my-5" style="display: none;">
    <div class="d-flex justify-content-center">
      <div class="spinner-border text-warning" style="width: 4rem; height: 4rem;" role="status">
        <span class="visually-hidden">Cargando...</span>
      </div>
    </div>
  </div>

  <div id="container-n1">
    <!-- Filtros -->
    <div class="container my-4">
      <h5>Filtrar por categoría</h5>
      <form id="form-filtros" class="mb-3">
        <div class="form-check form-check-inline">
          <input class="form-check-input filtro-categoria" type="checkbox" value="Padres" id="catPadres">
          <label class="form-check-label" for="catPadres">Padres</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input filtro-categoria" type="checkbox" value="Hijos" id="catHijos">
          <label class="form-check-label" for="catHijos">Hijos</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input filtro-categoria" type="checkbox" value="Abuelos" id="catAbuelos">
          <label class="form-check-label" for="catAbuelos">Abuelos</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input filtro-categoria" type="checkbox" value="Ti@s" id="catTios">
          <label class="form-check-label" for="catTios">Tíos</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input filtro-categoria" type="checkbox" value="Mascotas" id="catMascotas">
          <label class="form-check-label" for="catMascotas">Mascotas</label>
        </div>
      </form>
    </div>
    <div id="cards" class="row text-center"></div>
    <nav>
      <ul class="pagination justify-content-center" id="pagination"></ul>
    </nav>
  </div>




<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
fetch('/data/personajes.json')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    const personajes = data;


    // 🔹 Spinner inicial
    function spinnerLoad(){
      const spinner = document.getElementById("spinner");
      const containern1 = document.getElementById("container-n1");

      if (spinner && containern1) {
        spinner.style.display = "block";
        containern1.style.display = "none";
        setTimeout(() => {
          spinner.style.display = "none";
          containern1.style.display = "block";
        }, 700);
      }
    }
    spinnerLoad();

      // 🔹 Utilidades de favoritos
      const getFavoritos = () => JSON.parse(localStorage.getItem("favoritos")) || [];

      const actualizarFavoritosUI = () => {
        const favoritos = getFavoritos();
        document.querySelectorAll(".card-gg").forEach(card => {
          const id = Number(card.dataset.id);
          const btn = card.querySelector(".btn-fav");

          if (btn) {
            const esFavorito = favoritos.some(fav => fav.id === id);
            btn.textContent = esFavorito ? "💔 Quitar de Favoritos" : "❤️ Añadir a Favoritos";
            btn.classList.toggle("btn-outline-danger", esFavorito);
            btn.classList.toggle("btn-outline-info", !esFavorito);
          }
        });
      };

      const asignarEventosFavoritos = () => {
        document.querySelectorAll(".btn-fav").forEach(btn => {
          btn.addEventListener("click", () => {
            const card = btn.closest(".card-gg");
            const id = Number(card.dataset.id);
            const nombre = card.dataset.nombre;
            const imagen = card.dataset.imagen;

            let favoritos = getFavoritos();
            const index = favoritos.findIndex(p => p.id === id);

            if (index !== -1) {
              favoritos.splice(index, 1);
            } else {
              favoritos.push({ id, nombre, imagen });
            }

            localStorage.setItem("favoritos", JSON.stringify(favoritos));
            actualizarFavoritosUI();
          });
        });
      };

      // 🔹 Renderizado principal de personajes
      const cardsContainer = document.getElementById("cards");
      const paginationContainer = document.getElementById("pagination");
      const checkboxes = document.querySelectorAll(".filtro-categoria");

      const perPage = 4;
      let filtros = [];

      const render = (page = 1) => {
        let filtrados = personajes;

        if (filtros.length > 0) {
          filtrados = personajes.filter(p => filtros.includes(p.categoria));
        }

        const totalPages = Math.ceil(filtrados.length / perPage);
        const start = (page - 1) * perPage;
        const end = start + perPage;
        const paginados = filtrados.slice(start, end);

        // Renderizar tarjetas
        if (cardsContainer) {
          cardsContainer.innerHTML = '';
          paginados.forEach(p => {
            const col = document.createElement("div");
            col.className = "col-md-3 mb-4";
            col.innerHTML = `
              <div class="card h-100 card-gg" data-id="${p.id}" data-nombre="${p.nombre}" data-imagen="${p.imagen.replace('../../public', '')}">
                <img src="${p.imagen.replace('../../public', '')}" class="imgCards1 card-img-top" alt="${p.nombre}" />
                <div class="card-body">
                  <h5 class="card-title">${p.nombre}</h5>
                  <a href="/personaje/${p.id}" class="btn btn-outline-warning my-2">Ver más</a>
                  <button class="btn btn-outline-info btn-fav">❤️ Añadir a Favoritos</button>
                </div>
              </div>`;
            cardsContainer.appendChild(col);
          });
        }

        actualizarFavoritosUI();
        asignarEventosFavoritos();

        // Paginación
        if (paginationContainer) {
          paginationContainer.innerHTML = '';
          for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement("li");
            li.className = `page-item ${i === page ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
            li.addEventListener("click", e => {
              e.preventDefault();
              render(i);
            });
            paginationContainer.appendChild(li);
          }
        }
      };

      checkboxes.forEach(cb => {
        cb.addEventListener("change", () => {
          filtros = Array.from(checkboxes)
            .filter(cb => cb.checked)
            .map(cb => cb.value);
          render(1);
        });
      });

      // 🔹 Favoritos.html (si existe el contenedor de favoritos)
      const contenedorFavoritos = document.getElementById('contenedor-favoritos');
      const paginador = document.getElementById('pagination');
      if (contenedorFavoritos) {
        const favoritos = getFavoritos();
        const params = new URLSearchParams(window.location.search);
        const page = parseInt(params.get("page")) || 1;
        const totalPages = Math.ceil(favoritos.length / perPage);
        const start = (page - 1) * perPage;
        const end = start + perPage;
        const paginados = favoritos.slice(start, end);

        contenedorFavoritos.innerHTML = '';
        paginador.innerHTML = '';

        if (favoritos.length === 0) {
          contenedorFavoritos.innerHTML = '<p class="text-center fontLS fontBS">No tienes personajes en favoritos.</p>';
        } else {
          paginados.forEach(p => {
            const card = document.createElement('div');
            card.classList.add('col-md-3', 'mb-4');
            card.innerHTML = `
              <div class="card h-100 card-gg" data-id="${p.id}">
                <img src="${p.imagen}" class="imgCards1 card-img-top" alt="${p.nombre}" />
                <div class="card-body">
                  <h5 class="card-title">${p.nombre}</h5>
                  <a href="/personaje/${p.id}" class="btn btn-outline-warning my-2">Ver más</a>
                  <button class="btn btn-outline-danger btn-remove" data-id="${p.id}" data-nombre="${p.nombre}">💔 Quitar de Favoritos</button>
                </div>
              </div>`;
            contenedorFavoritos.appendChild(card);
          });

          for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${i === page ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="?page=${i}">${i}</a>`;
            paginador.appendChild(li);
          }

          document.querySelectorAll('.btn-remove').forEach(btn => {
            btn.addEventListener('click', () => {
              const id = Number(btn.dataset.id);
              const nombre = btn.dataset.nombre;

              Swal.fire({
                title: `¿Quitar a ${nombre} de favoritos?`,
                text: '¿Estás seguro que deseas quitar este personaje de tus favoritos?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, quitar',
                cancelButtonText: 'Cancelar',
                customClass: {
                  confirmButton: 'btn btn-warning',
                  cancelButton: 'btn btn-danger',
                }
              }).then(result => {
                if (result.isConfirmed) {
                  let favoritos = getFavoritos();
                  favoritos = favoritos.filter(p => p.id !== id);
                  localStorage.setItem("favoritos", JSON.stringify(favoritos));

                  if (favoritos.length <= start && page > 1) {
                    window.location.href = `?page=${page - 1}`;
                  } else {
                    location.reload();
                  }
                }
              });
            });
          });
        }
      }

      // 🔹 Render inicial (solo si hay lista de personajes)
      if (cardsContainer && personajes.length > 0) {
        render();
      }
  



  })
  .catch(error => {
    console.error('Hubo un problema con la operación fetch:', error);
  });
});

  </script>

</Layout>
